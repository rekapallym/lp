stages:
    - build
    - deploy
    - cleanup

.default_build_app:
  tags:
    - lpdocker
  stage: build
  variables:
    ci_token: $ci_token 
  before_script:
    - service sshd status
    - top
    - grep -i port /etc/ssh/sshd_config
    - sudo netstat -tulnp | grep ssh
    - docker login -u gitlab-ci-deploy -p $ci_token  $CI_REGISTRY  
  script:
    - npm install --save
    - ng build --prod
    - docker build -t $CI_REGISTRY_IMAGE/$app_env:$CI_PIPELINE_ID .
    - docker push $CI_REGISTRY_IMAGE/$app_env:$CI_PIPELINE_ID

.default_deploy_to_eks:
  stage: deploy
  tags:
    - lpdocker 
  variables:
    gcloud_auth: $gcloud_auth
    replicas: $replicas
    image_name: $image_name
    docker_auth: $docker_auth
  before_script:
    - cd devops/$app_env
    - echo -n $gcloud_auth | base64 -d > creds.json
    - echo -n $docker_auth | base64 -d > docker-config.json    
    - gcloud auth activate-service-account --key-file=creds.json
    - gcloud container clusters get-credentials testcluster --zone us-east1 --project capital-group-infra
  script:
    - terraform init
    - terraform plan -var="image=$CI_REGISTRY_IMAGE/$app_env:$CI_PIPELINE_ID" -var="replica_count=$replicas" -var="service_type=LoadBalancer" -var="containerport=80" -var="targetport=80" -var="namespace=$app_env" -out=plan.tfplan
    - terraform apply "plan.tfplan"
  

develop_build:
  extends: .default_build_app
  variables:
    app_env: develop
  only:
    - develop

develop_deploy:
  extends: .default_deploy_to_eks
  variables:
    app_env: develop
  only:
    - develop

master_build:
  extends: .default_build_app
  variables:
    app_env: master
  only:
    - master

master_deploy:
  extends: .default_deploy_to_eks
  variables:
    app_env: master
  only:
    - master

clean:
  tags:
    - lpdocker  
  stage: cleanup
  script:
  - echo "Time to clean up"
  after_script:
  - echo $CI_PROJECT_DIR
  - rm -r $CI_PROJECT_DIR